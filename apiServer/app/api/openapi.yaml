openapi: 3.0.0
info:
  title: Community Model API
  version: v.2.0
  description: >-
    API for accessing data generated by the Community Model, for updating user
    data used by the Community Model for finding communities and for inserting
    new perspectives.
  contact:
    email: gjimenez@ucm.es
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: ''
servers:
  - url: /v2.0/
    description: Sandbox server (for testing purposes)
  - url: /hecht/v2.0/
    description: Data for HECHT Museum
  - url: /gam/v2.0/
    description: Data for GAM Museum
  - url: /mncn/v2.0/
    description: Data for MNCN Museum
  - url: /dmh/v2.0/
    description: Data for DMH Museum
security:
  - basicAuth: []
tags:
  - name: Perspectives
    description: Operations related to computing perspectives among communities.
  - name: Communities
    description: Operations related to information about communities.
  - name: Users
    description: Operations related to users in communities.
  - name: Similarities
    description: Operations about computing similarity among communities.
  - name: '[DEV] Community Model Logs'
    description: Operations related to CM Logs.
  - name: '[DEV] Jobs Manager'
    description: Monitor the status of a job.
  - name: '[DEV] VISIR'
    description: Operations related to VISIR application.
  - name: '[DEV] Database controller'
    description: Operations related to database.
paths:
  /logs:
    get:
      tags:
        - '[DEV] Community Model Logs'
      parameters:
        - style: form
          explode: true
          name: nLogs
          description: N latest logs. Use '0' to get all logs
          schema:
            minimum: 0
            type: integer
          in: query
          required: true
        - style: form
          explode: true
          name: logsType
          description: Type of logs
          schema:
            default: ALL
            enum:
              - ALL
              - DEBUG
              - INFO
              - WARNING
              - ERROR
              - CRITICAL
            type: string
          in: query
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/log'
          description: successful operation
        '400':
          description: error
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getNLatestLogs
      summary: Get n latest logs
      description: Returns the last n documents
      x-swagger-router-controller: Logs
  /logs/dateRange:
    get:
      tags:
        - '[DEV] Community Model Logs'
      parameters:
        - style: form
          explode: true
          name: startDate
          description: 'Start date. ISO 8601 format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS'
          schema:
            format: date
            type: string
            example: '2017-07-21T17:32:28Z'
          in: query
          required: true
        - style: form
          explode: true
          name: endDate
          description: >-
            End date. The end date must be greater than the start date. ISO 8601
            format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS
          schema:
            format: date
            type: string
            example: '2016-03-04T03:00:00'
          in: query
          required: true
        - style: form
          explode: true
          name: logsType
          description: Type of logs
          schema:
            default: ALL
            enum:
              - ALL
              - DEBUG
              - INFO
              - WARNING
              - ERROR
              - CRITICAL
            type: string
          in: query
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/log'
          description: successful operation
        '400':
          description: error
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getLogsBetweenTwoDates
      summary: Get logs between date range
      description: Returns logs between date range
      x-swagger-router-controller: Logs
  /visir/seed:
    get:
      tags:
        - '[DEV] VISIR'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seedFile'
          description: successful operation
        '400':
          description: invalid seed id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getSeed
      summary: Get seed file
      description: Returns seed configuration file used by VISIR application.
      x-swagger-router-controller: Visir
  /visir/files:
    get:
      tags:
        - '[DEV] VISIR'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seedFile'
          description: successful operation
        '400':
          description: invalid seed id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getIndex
      summary: List of all available visualization files
      description: Returns list of all available visualization files.
      x-swagger-router-controller: Visir
  /perspectives:
    get:
      tags:
        - Perspectives
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/perspective'
                x-content-type: application/json
          description: A list with the perspectives in the model.
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: >-
            Job accepted. Updating CM before returning requested data.
            Redirecting to Jobs Manager
        '400':
          description: Community model does not exist
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getPerspectives
      summary: Get all perspectives in the community model.
      description: >-
        Returns a list of the perspectives in the community model. If the CM
        update is necessary returns a job.
      x-swagger-router-controller: Perspectives
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/perspective'
        required: true
      tags:
        - Perspectives
      responses:
        '204':
          description: Added
        '400':
          description: error
        '401':
          $ref: '#/components/responses/401'
      operationId: postPerspective
      summary: Inserts perspective to the Community Model
      description: ''
      x-swagger-router-controller: Perspectives
  /perspectives/{perspectiveId}:
    get:
      tags:
        - Perspectives
      parameters:
        - style: simple
          explode: false
          name: perspectiveId
          description: ID of perspective to return
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/perspective'
          description: successful operation
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: >-
            Job accepted. Updating CM before returning requested data.
            Redirecting to Jobs Manager
        '400':
          description: invalid perspective id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getPerspectiveById
      summary: Get one perspective
      description: >-
        Returns Information about a perspective. If the CM update is necessary
        returns a job.
      x-swagger-router-controller: Perspectives
    delete:
      tags:
        - Perspectives
      parameters:
        - style: simple
          explode: false
          name: perspectiveId
          description: ID of perspective to delete
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid perspective id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: [ ]
      operationId: deletePerspective
      summary: Delete a perspective by ID
      description: >-
        Delete an existing perspective, referenced by ID.
      x-swagger-router-controller: Perspectives
  /perspectives/{perspectiveId}/communities:
    get:
      tags:
        - Perspectives
      parameters:
        - style: simple
          explode: false
          name: perspectiveId
          description: ID of the perspective to return
          schema:
            $ref: '#/components/schemas/job'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/community'
                x-content-type: application/json
          description: successful operation
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: >-
            Job accepted. Updating CM before returning requested data.
            Redirecting to Jobs Manager
        '400':
          description: invalid community id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: listPerspectiveCommunities
      summary: Communities with the same perspective
      description: >+
        Returns a list with the communities. If the CM update is necessary
        returns a job.

      x-swagger-router-controller: Perspectives
  /communities:
    get:
      tags:
        - Communities
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                type: array
                items:
                  $ref: '#/components/schemas/community'
                externalDocs:
                  description: ''
                  url: ''
                example: ''
                x-content-type: application/json
              example: ''
          description: A list with the communities in the model
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: >-
            Job accepted. Updating CM before returning requested data.
            Redirecting to Jobs Manager
        '400':
          description: Community model does not exist
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getCommunities
      summary: Get all communities in the model
      description: >-
        Access to a list of the communities in the community model. If the CM
        update is necessary returns a job.
      x-swagger-router-controller: Communities
  /communities/{communityId}:
    get:
      tags:
        - Communities
      parameters:
        - style: simple
          explode: false
          name: communityId
          description: ID of community to return
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/community'
          description: successful operation
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: >-
            Job accepted. Updating CM before returning requested data.
            Redirecting to Jobs Manager
        '400':
          description: invalid community id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getCommunityById
      summary: Get community description and explanation
      description: >-
        Returns information about a community. If the CM update is necessary
        returns a job.
      x-swagger-router-controller: Communities
  /communities/{communityId}/users:
    get:
      tags:
        - Communities
      parameters:
        - style: simple
          explode: false
          name: communityId
          description: ID of community to return
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/id'
                x-content-type: application/json
          description: successful operation
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: >-
            Job accepted. Updating CM before returning requested data.
            Redirecting to Jobs Manager
        '400':
          description: invalid community id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: listCommunityUsers
      summary: Users who belong to a community
      description: >-
        Returns a list with the ids of the users who belong to a community. If
        the CM update is necessary returns a job.
      x-swagger-router-controller: Communities
  /users/{userId}/communities:
    get:
      tags:
        - Users
      parameters:
        - style: simple
          explode: false
          name: userId
          description: ID of user
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/id'
                x-content-type: application/json
          description: successful operation
        '400':
          description: invalid user id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: listUserCommunities
      summary: Communities that a user belongs
      description: Returns a list with the ids of the communities that the user belongs to.
      x-swagger-router-controller: Users
  /users/{userId}/update-generated-content:
    post:
      requestBody:
        description: >-
          A list with objects that represent the information about the user that
          will be added to the community model
        content:
          application/json:
            schema:
              description: A list of user generated content objects for the Community Model
              type: array
              items:
                $ref: '#/components/schemas/user-generated-content'
        required: true
      tags:
        - Users
      parameters:
        - style: simple
          explode: false
          name: userId
          description: ID of user
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '204':
          description: Updated
        '400':
          description: >-
            Invalid userId userId in the URL differs form the userid in the body
            request
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: updateUsers
      summary: Update community model with new user generated content
      description: >-
        This service is employed to inform the CM the users who were
        created/updated in the User Model.
      x-swagger-router-controller: Users
  /communities/{communityId}/similarity:
    get:
      tags:
        - Similarities
      parameters:
        - style: simple
          explode: false
          name: communityId
          description: ID of the target community to compute similarity
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
        - style: form
          explode: true
          name: k
          description: Size of the result (k most similar communities)
          schema:
            minimum: 1
            type: integer
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/similarityScore'
                x-content-type: application/json
          description: >-
            A list with the similarity scores between the parameter community
            and the k-most similar communities, in descending order
        '400':
          description: Invalid communityId or query parameters
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: computeKmostSimilar
      summary: K-most similar communities
      description: >-
        Returns a list with the k most similar communities to the chosen one in
        the model.
      x-swagger-router-controller: Similarity
  /communities/{communityId}/similarity/{otherCommunityId}:
    get:
      tags:
        - Similarities
      parameters:
        - style: simple
          explode: false
          name: communityId
          description: ID of the target community to compute similarity
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
        - style: simple
          explode: false
          name: otherCommunityId
          description: ID of the other community to compute similarity
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/similarityScore'
          description: A similarity score object between targetCommunity and otherCommunity
        '400':
          description: Invalid communityIds (target or other)
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: computeSimilarity
      summary: Similarity between two communities
      description: Returns a similarity score between two communities.
      x-swagger-router-controller: Similarity
  /communities/{communityId}/dissimilarity:
    get:
      tags:
        - Similarities
      parameters:
        - style: simple
          explode: false
          name: communityId
          description: ID of the target community to compute dissimilarity
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
        - style: form
          explode: true
          name: k
          description: Size of the result (k most dissimilar communities)
          schema:
            minimum: 1
            type: integer
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/similarityScore'
                x-content-type: application/json
          description: >-
            A list with the dissimilarity scores between the parameter community
            and the k-most dissimilar communities, in descending order
        '400':
          description: Invalid community-id or query parameters
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: computeKmostDissimilar
      summary: K-most dissimilar communities
      description: >-
        Returns a list with the k most dissimilar communities to the chosen one
        in the model.
      x-swagger-router-controller: Similarity
  /communities/{communityId}/dissimilarity/{otherCommunityId}:
    get:
      tags:
        - Similarities
      parameters:
        - style: simple
          explode: false
          name: communityId
          description: ID of the target community to compute dissimilarity
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
        - style: simple
          explode: false
          name: otherCommunityId
          description: ID of the other community to compute dissimilarity
          schema:
            $ref: '#/components/schemas/id'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/similarityScore'
          description: >-
            The dissimilarity score object between targetCommunity and
            otherCommunity
        '400':
          description: Invalid community-ids (target or other)
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: computeDissimilarity
      summary: Dissimilarity between two communities
      description: Returns the dissimilarity score between two communities
      x-swagger-router-controller: Similarity
  /database-controller/dump:
    get:
      tags:
        - '[DEV] Database controller'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seedFile'
          description: successful operation
        '400':
          description: invalid seed id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getDump
      summary: Get current database state
      description: Returns collections stored in database
      x-swagger-router-controller: DatabaseController
    post:
      tags:
        - '[DEV] Database controller'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seedFile'
          description: successful operation
        '400':
          description: error
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: postDump
      summary: Load data into database state
      description: Resets and loads sent data into database
      x-swagger-router-controller: DatabaseController
    x-last-modified: 1678483291806
  /visir/files/{fileId}:
    get:
      tags:
        - '[DEV] VISIR'
      parameters:
        - style: simple
          explode: false
          name: fileId
          description: Id of the file
          schema:
            $ref: '#/components/schemas/jobId'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seedFile'
          description: successful operation
        '400':
          description: invalid seed id
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getFile
      summary: Return the specified visualization file
      description: Returns the requested visualization file.
      x-swagger-router-controller: Visir
    x-last-modified: 1678483487526
  /jobs-manager/jobs/{jobId}:
    get:
      tags:
        - '[DEV] Jobs Manager'
      parameters:
        - style: simple
          explode: false
          name: jobId
          description: Id of the job to monitor
          schema:
            $ref: '#/components/schemas/jobId'
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/jobStarted'
                  - $ref: '#/components/schemas/jobCompleted'
          description: Job status
        '400':
          description: Job does not exist
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getJob
      summary: Job status
      description: >-
        Monitor the status of a job. Shows if the status of the job is finished
        or in progress, and returns data if it is finished. User agent should
        send periodically /Get requests to check the completion status of the
        job.
      x-content-type: application/json
      x-swagger-router-controller: JobsRouter
    x-last-modified: 1678486713587
  /jobs-manager/jobs:
    get:
      tags:
        - '[DEV] Jobs Manager'
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/jobStarted'
                  - $ref: '#/components/schemas/jobCompleted'
          description: Job status
        '400':
          description: Job does not exist
        '401':
          $ref: '#/components/responses/401'
      security:
        - basicAuth: []
      operationId: getJobs
      summary: Status of all jobs
      description: Returns all current jobs.
      x-content-type: application/json
      x-swagger-router-controller: JobsRouter
components:
  schemas:
    id:
      description: Unique id
      type: string
      example: d290f1ee-6c54-4b01-90e6-d701748f0851
    perspectiveId:
      description: Unique perspective id
      type: string
      example: d290f1ee-6c54-4b01-90e6-d701748f0851
    param:
      description: Param
      type: string
      example: param
    community:
      required:
        - id
        - name
        - perspectiveId
        - users
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          description: Community name
          type: string
          example: elderly
        perspectiveId:
          description: perspectiveId
          type: string
          example: perspectiveId
        explanations:
          description: >-
            a list of community descriptions (maybe empty). It can be computed
            by the explanation module
          type: array
          items:
            type: string
          example: People whose age is above 65
        users:
          description: A list with the users who belong to the community
          type: array
          items:
            $ref: '#/components/schemas/id'
          example:
            - '23'
            - '24'
      example:
        name: elderly
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
        explanation: People whose age is above 65
        perspectiveId: '101'
        users:
          - '23'
          - '24'
    jobId:
      description: Unique job id
      type: string
      example: 4351
    jobStarted:
      title: jobStarted
      type: object
      properties:
        job:
          title: job
          type: object
          properties:
            path:
              description: path
              type: string
              example: /v2.0/jobs/4351
            jobId:
              $ref: '#/components/schemas/jobId'
            name:
              description: name
              type: string
              example: CM Update
            job-state:
              description: job state
              type: string
              example: STARTED
            job-status:
              description: job status
              type: string
              example: INPROGRESS
            start-time:
              description: job start time
              type: string
              example: INPROGRESS
            time-to-autoremove-job:
              description: time left for autoremove the job
              type: string
              example: INPROGRESS
            data:
              description: The job is not done yet
              type: object
    jobCompleted:
      title: jobCompleted
      type: object
      properties:
        job:
          title: job
          type: object
          properties:
            path:
              description: path
              type: string
              example: /v2.0/jobs/4351
            jobId:
              $ref: '#/components/schemas/jobId'
            name:
              description: name
              type: string
              example: CM Update
            job-state:
              description: job state
              type: string
              example: COMPLETED
            job-status:
              description: job status
              type: string
              example: SUCCESS
            start-time:
              description: job start time
              type: string
              example: INPROGRESS
            time-to-autoremove-job:
              description: time left for autoremove the job
              type: string
              example: INPROGRESS
            data:
              oneOf:
                - $ref: '#/components/schemas/perspective'
                - $ref: '#/components/schemas/community'
                - $ref: '#/components/schemas/listPerspectives'
                - $ref: '#/components/schemas/listCommunities'
                - $ref: '#/components/schemas/perspectiveId'
                - description: perspectiveId perspectiveId
                  type: string
                - description: Visfile
                  type: string
              type: object
    listPerspectives:
      description: List of perspectives
      type: array
      items:
        $ref: '#/components/schemas/perspective'
    listCommunities:
      description: List of communities
      type: array
      items:
        $ref: '#/components/schemas/community'
    job:
      required:
        - path
      type: object
      properties:
        path:
          description: job
          type: string
          example: /v2.0/jobs/{jobId}
    log:
      title: log
      type: object
      properties:
        name:
          type: string
        msg:
          type: string
        args:
          type: array
          items:
            type: string
        levelname:
          type: string
        levelno:
          type: integer
        pathname:
          type: string
        filename:
          type: string
        module:
          type: string
        exc_info:
          nullable: true
          type: string
        exc_text:
          nullable: true
          type: string
        stack_info:
          nullable: true
          type: string
        lineno:
          type: integer
        funcName:
          type: string
        created:
          type: number
        msecs:
          type: integer
        relativeCreated:
          type: number
        thread:
          type: integer
        threadName:
          type: string
        processName:
          type: string
        process:
          type: integer
        username:
          type: string
        time:
          format: date
          type: string
        host:
          type: string
        message:
          type: string
    perspective:
      required:
        - id
        - name
        - algorithm
        - similarity_functions
        - user_attributes
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          description: Perspective name
          type: string
          example: name
        algorithm:
          title: Algorithm used for this perspective
          type: object
          properties:
            name:
              description: The name of the algorithm
              type: string
              example: optics
            params:
              description: Params
              type: array
              items:
                $ref: '#/components/schemas/param'
              example:
                - paramA
                - paramB
        similarity_functions:
          description: similarity_functions
          type: array
          items:
            $ref: '#/components/schemas/sim_function'
        user_attributes:
          type: array
          items:
            title: user_attributes
            type: object
            properties:
              att_name:
                description: att_name
                type: string
                example: att_name
              att_type:
                description: att_type
                type: string
                example: att_type
    seedFile:
      required:
        - artwork_attributes
        - user_attributes
        - interaction_similarity_functions
      type: object
      properties:
        artwork_attributes:
          type: array
          items:
            type: object
            properties:
              sim_function:
                type: object
                properties:
                  name:
                    type: string
                    example: IconClassSimilarityDAO
                  params:
                    type: array
                    items:
                      type: object
                      properties:
                        att_name:
                          type: string
                          example: Iconclass_subjects_curators
                        att_type:
                          type: string
                          example: String
                  on_attribute:
                    type: object
                    properties:
                      att_name:
                        type: string
                        example: Iconclass_subjects_curators
                      att_type:
                        type: string
                        example: String
        user_attributes:
          type: array
          items:
            type: object
            properties:
              att_name:
                type: string
                example: Age
              att_type:
                type: string
                example: String
        interaction_similarity_functions:
          type: array
          items:
            type: object
            properties:
              sim_function:
                type: object
                properties:
                  name:
                    type: string
                    example: ExtendedPlutchikEmotionSimilarityDAO
                  params:
                    type: array
                    items:
                      type: object
                      properties:
                        att_name:
                          type: string
                          example: Iconclass_subjects_curators
                        att_type:
                          type: string
                          example: String
                  on_attribute:
                    type: object
                    properties:
                      att_name:
                        type: string
                        example: emotions
                      att_type:
                        type: string
                        example: String
                  interaction_object:
                    type: object
                    properties:
                      att_name:
                        type: string
                        example: artworkId
                      att_type:
                        type: string
                        example: String
    attributes:
      title: attributes
      type: object
      properties:
        att_name:
          description: att_name
          type: string
          example: att_name
        att_type:
          description: att_type
          type: string
          example: att_type
    sim_function:
      title: similarity_function
      type: object
      properties:
        name:
          description: name
          type: string
          example: name
        weight:
          description: weight
          type: number
          example: 2
        params:
          description: Params
          type: array
          items:
            $ref: '#/components/schemas/param'
          example:
            - paramA
            - paramB
        on_attribute:
          title: on_attribute
          type: object
          properties:
            att_name:
              description: att_name
              type: string
              example: att_name
            att_type:
              description: att_type
              type: string
              example: att_type
    similarityScore:
      description: Schema for results that compute similarity values
      type: object
      properties:
        target-community-id:
          $ref: '#/components/schemas/id'
        other-community-id:
          $ref: '#/components/schemas/id'
        value:
          description: Similarity/dissimilarity value between the specified communities
          type: number
        similarity-function:
          description: Similarity function employed to compute this similarity score
          type: string
      example:
        target-community-id: d290f1ee-6c54-4b01-90e6-d701748f0851
        other-community-id: d290f1ee-6c54-4b01-90e6-d701748f0853
        similarity-function: similarity-function
        value: 0.8008281904610115
    user-generated-content:
      required:
        - id
        - origin
        - pname
        - pvalue
        - source_id
        - userid
      type: object
      properties:
        id:
          description: >-
            Unique id (generated by the User Model) for the user generated
            content (UGC).
          type: string
          example: '11541'
        userid:
          description: Unique user id
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        origin:
          description: >-
            Unique id for the item or concept in the museum that this user
            generated content refers to.
          type: string
          example: 90e6d701748f08514b01
        source_id:
          description: Unique id for the UGC that this content is derived from
          type: string
          example: 90e6d701748f08514b01
        source:
          description: Description about the UGC that this content is derived from
          type: string
          example: Content description
        pname:
          description: Name of the property included in this UGC
          type: string
          example: DemographicGender
        pvalue:
          description: Value of the property included in this UGC
          type: string
          example: F (for Female value)
        context:
          description: Context of the property included in this UGC
          type: string
          example: application P:DemographicsPrep
        datapoints:
          description: Number of datapoint used to generate this UGC
          type: number
          example: 0
    UnauthorizedError:
      required:
        - message
        - code
      type: object
      properties:
        message:
          type: string
        code:
          maximum: 401
          minimum: 401
          type: integer
      x-last-modified: 1678572397915
  responses:
    '401':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
      description: Unauthorized access.
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
      description: Use `user` / `pass` as the test credentials
  headers: {}
  parameters: {}
