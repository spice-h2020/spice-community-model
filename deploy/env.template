#
# Docker Container configuration
#

# Template .env file for configuring the docker containers used in CM-API
#
# This template is created using diferent .yml files and config variables. 
# Some of them are needed depending on the .yml files included in this file
#
# Recommendation: define ALL variables needed even if they are empty. This way,
# Docker compose will generate warning messages about not defined variables.
#
# USE: Copy this file, rename it to .env and run docker-compose. 
# You can also use a different name and run it with:
#
# docker-compose --env-file mifichero.env <resto de los comandos>


######################################
#
#     Configuration Variables
#
######################################

API_USER=user
API_PASS=pass
TYPE=GAM

#######
#
# Database configuration
#

# Configuration for *database initialization*.
# It is only necessary for the first run
MONGO_INITDB_ROOT_USERNAME=admin
MONGO_INITDB_ROOT_PASSWORD=adminadmin

# Database configuration:
# - Name of the Mongo database.
# - Username.
# - Password.
#
# MONGODB_DATABASE=... # Default: "spiceComMod". Uncomment to change it.
# MONGODB_USER=...     # Default "spice". Uncomment to change it.
MONGODB_PASSWORD=spicepassword

# By default, the database is stored directly in the database container.
# This is not very useful for persistency.
# 
# Alternatives:
#
# - Using a Docker volume: Volume name cannot be changed (db). You must
#   include db.volume.yml to use it.
# - Using a host folder. Absolute path to this folder should be defined using 
#   $HOST_DB_PATH variables and you must include db.directory.yml.
#   HOST_UID and HOST_GUID must have write permissions in this folder.
#
# HOST_DB_PATH=/
# HOST_UID=1000
# HOST_GUID=1000

#######
#
# Network configuration
#

# By default, MongoDB port is *not* exposed in the host. It is not
# necesary during deployment and it avoids security problems.
#
# If you want to use it expose it during development for accessing
# the database using host tools, you *must include db.exposeport.yml* 
# and, optionally, you can modify the MongoDB host port (by default, 27017)
MONGODB_HOST_PORT=27018


# Container port where the node web server is listening (by default, 8080)
# Probably you do not need to change it
APP_CONTAINER_PORT=8080

# By default, Node web server is *not* exposed in the host. Normally, host 
# will configure the connection between the host port and the Node web server
# in the container, or the access will be available using another container 
# (tipically Traefik), which uses the Docker network.
# The following variables are important depending how to configure the access to the 
# Node web server.

# Public host port where the node server is listening.
# You *must include app.exposeport.yml file* (if not, the server is
# only available using the Docker network).
# Puerto público (del anfitrión) en el que escucha la aplicación.
APP_HOST_PORT=8080




# Community Model port where the CM server is listening (by default, 8090)
# Probably you do not need to change it
CM_CONTAINER_PORT=8090
# Public host port where the CM is listening.
# Probably you do not need to use it
CM_HOST_PORT=8090


#
# Traefik (inversed proxy during deployment)
#

# Docker network name: Node web server will only connect with this network
# and Traefik will connect with it using this server.
# Network must be created manually before (using docker network create)
# and Traefik container should be connected to this network.
#
# If this variables is used you *must include traefik.yml*
#TRAEFIK_NETWORK=traefikNet

# Public name of the server: URL used by final users to connect to the CM-API
# 
# *It is needed only if traefik.yml file is included*.
# Traefik will use it to redirect requests to the CM-API server
# SERVER_PUBLIC_NAME=spice.fdi.ucm.es

# Public name of the server: URL used by final users to connect to the CM-API
# 
# It Enhances Traefik base configuration (in traefik.yml) 
# for deploying services with a path different from /
# Useful if we have several deployments for the same
# URL ($SERVER_PUBLIC_NAME) in differente paths (in our case, http://$SERVER_PUBLIC_NAME/museumName)
# SERVER_PUBLIC_URL=/gam

# Traefik service ID. *It must be unique* and it is used
# by the inverse proxy rules. You can avoid collision name problems
# using the public name.
# *It is needed only if traefik.yml file is included*.
#TRAEFIK_SERVICE_ID=spice-cm-gam

######################################
#
# Compose Configuration.
#
######################################


# Project name. It is employed as prefix for container names
# (instead of using the folder name)
COMPOSE_PROJECT_NAME=spice_cm_gam


#######
#
# Files using to for layered docker-compose file
# Order is important!!
#

# Examples

# Only base.yml : Web server and database. It is not useful 
# because web server is accesible only using the temp network
# name created by docker-compose
#COMPOSE_FILE=base.yml

# Web server accessible using a host port ($APP_HOST_PORT)
#COMPOSE_FILE=base.yml;app.exposeport.yml

# Development version: Web server is accesible using a host port ($APP_HOST_PORT)
# and database is also accesible using another host port ($MONGODB_HOST_PORT)
# and CM is also accesible using another host port ($CM_HOST_PORT)
COMPOSE_FILE=base.yml;app.exposeport.yml;db.exposeport.yml;cm.exposeport.yml

# Deployment version: Web server accessible using traefik and the Docker network
# $TRAEFIK_NETWORK manually created. Web server public names is $SERVER_PUBLIC_NAME
#COMPOSE_FILE=base.yml:network.yml:traefik.yml:traefik.url.yml:traefik.ssl.yml
